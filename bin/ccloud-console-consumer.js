#!/usr/bin/env node
'use strict';

var Kafka = require('node-rdkafka');
var util = require('util');

var argv = require('optimist')
    .usage('Usage: $0 -e <endpoint> -k <apikey> -s <apisecret> -t <topic> -c <consumer group id> -S <ssl ca location> -v -b')
    .demand(['e', 'k', 's', 't'])
    .boolean(['v', 'b'])
    .alias('e', 'endpoint')
    .describe('e', 'Confluent Cloud Endpoints (Broker List)')
    .alias('b', 'beginning')
    .describe('b', 'Consume messages from beginning')
    .alias('k', 'apikey')
    .describe('k', 'Confluent Cloud API Key')
    .alias('s', 'apisecret')
    .describe('s', 'Confluent Cloud API Secret')
    .alias('t', 'topic')
    .describe('t', 'Kafka Topic to consume from')
    .alias('c', 'cgid')
    .describe('c', 'Consumer group.id (defaults to autogenerated')    
    .alias('v', 'verbose')
    .describe('v', 'Verbose mode')
    .alias('S', 'sslcaloc')
    .describe('S', 'SSL CA Location')
    .default('S', '/usr/local/etc/openssl/cert.pem')
    .alias('?', 'help')
    .describe('?', 'Print usage information');
      
argv = argv.argv;

if ( argv.help === true ) {
    console.log( 'Usage: ccloud-console-consumer -e <endpoint> -k <apikey> -s <apisecret> -t <topic>');
    console.log( '\nOptions:');
    console.log( '  -e, --endpoint   Confluent Cloud Endpoints (Broker List)     [required]');
    console.log( '  -k, --apikey     Confluent Cloud API Key                     [required]');
    console.log( '  -s, --apisecret  Confluent Cloud API Secret                  [required]');
    console.log( '  -t, --topic      Kafka Topic to consumer from                [required]');
    console.log( '  -v, --verbose    Verbose mode                                [boolean]');
    console.log( '  -b, --beginning  Consume messages from beginning             [boolean]');
    console.log( '  -c, --cgid       Consumer Group ID                           [optional]');
    console.log( '  -S, --sslcaloc   SSL CA Location (default = /usr/local/etc/openssl/cert.pem)');
    console.log( '  -?, --help       Print usage information                      ');
    process.exit();
}

if (!argv.cgid) {
    argv.cgid = 'node-console-consumer' + Math.floor(Math.random() * (1000000));
}
if (argv.verbose) {
    console.log('Using consumer group.id = ' + argv.cgid);
}

var reset = 'largest';
if (argv.beginning) {
    reset = 'smallest';
}
console.log('auto.offset.reset = ' + reset);

var consumer;
try{
    // create node-rdkafka consumer      
    consumer = new Kafka.KafkaConsumer({
        'group.id': argv.cgid,    //required
        'client.id': 'ccloud-node-console-consumer',
        'metadata.broker.list': argv.endpoint,  //required
        'socket.keepalive.enable': true,
        'enable.auto.commit': false,
        //'enable.auto.commit': true,
        'queue.buffering.max.ms': 1,
        'fetch.min.bytes': 1,
        'fetch.wait.max.ms': 1,         //librkafka recommendation for low latency 
        'fetch.error.backoff.ms': 100,  //librkafka recommendation for low latency
        'security.protocol': 'sasl_ssl',
        'sasl.mechanisms': 'PLAIN',
        'sasl.username': argv.apikey,
        'sasl.password': argv.apisecret,
        'ssl.ca.location': argv.sslcaloc,
        'api.version.request': true
    }, { 
        'auto.offset.reset': reset
    });

    //Flowing mode
    consumer.connect();
            
    // consumer event handlers
    consumer
        .on('ready', function() { 
            consumer.subscribe([argv.topic]);
            // comsume from the topic
            consumer.consume();
            if (argv.verbose) {
                console.log('Created consumer subscription on topic = ' + argv.topic);
            }
        })
        .on('data', function(data) {
            // Output the actual message contents
            if (argv.verbose) {
                console.log('Got a message on topic "' + data.topic + '"');
                console.log(util.inspect(data));
            } else {
                console.log(data.value.toString()); 
            }
            //manual commit look like this if enable.auto.commit is set to true 
            if (argv.verbose) {
                console.log('calling commit');
            }
            consumer.commitMessage(data);
        })
        .on('error', function(err) {
            // Here's where we'll know if something went wrong consuming from Kafka
            console.error('Error in our kafka consumer: ' + err);
        })
        .on('disconnected', function(arg) {
            if (argv.verbose) {
                console.log('consumer disconnected. ' + JSON.stringify(arg));
            }
            process.exit();
        });

    process.on('SIGINT', function() {
        if (argv.verbose) {
            console.log("Caught interrupt signal");
        }
        consumer.unsubscribe();
        consumer.disconnect();
    });

} catch (e) {
    console.log('Caught error: ' + e);    
}